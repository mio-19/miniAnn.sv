// generated by sv2v
module unit_arr_average (
	in,
	out
);
	parameter N = 16;
	parameter LEN = 32;
	input wire [((N * LEN) * 16) - 1:0] in;
	output reg [(LEN * 16) - 1:0] out;
	reg [31:0] sum [LEN - 1:0];
	function [31:0] frac_unsigned_div_int;
		input reg [31:0] x;
		input reg signed [31:0] y;
		frac_unsigned_div_int = $unsigned(x) / y;
	endfunction
	function [15:0] unsigned_frac_to_unit_overflow_as_max;
		input reg [31:0] x;
		unsigned_frac_to_unit_overflow_as_max = (x[31:16] == 0 ? x[15:0] : 16'hffff);
	endfunction
	always @(*) begin : sv2v_autoblock_1
		integer i;
		for (i = LEN - 1; i >= 0; i = i - 1)
			out[i * 16+:16] = unsigned_frac_to_unit_overflow_as_max(frac_unsigned_div_int(sum[i], N));
	end
	function [31:0] frac_add;
		input reg [31:0] x;
		input reg [31:0] y;
		frac_add = x + y;
	endfunction
	function [31:0] unit_to_frac;
		input reg [15:0] x;
		unit_to_frac = {16'b0000000000000000, x};
	endfunction
	always @(*) begin
		begin : sv2v_autoblock_2
			integer i;
			for (i = LEN - 1; i >= 0; i = i - 1)
				sum[i] = 32'b00000000000000000000000000000000;
		end
		begin : sv2v_autoblock_3
			integer k;
			for (k = N - 1; k >= 0; k = k - 1)
				begin : sv2v_autoblock_4
					integer i;
					for (i = LEN - 1; i >= 0; i = i - 1)
						sum[i] = frac_add(sum[i], unit_to_frac(in[((k * LEN) + i) * 16+:16]));
				end
		end
	end
endmodule
