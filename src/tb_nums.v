// generated by sv2v
module tb_nums;
	function real frac2real;
		input reg [31:0] x;
		frac2real = ($signed(x) * 1.0) / 65536;
	endfunction
	function [31:0] frac_add;
		input reg [31:0] x;
		input reg [31:0] y;
		frac_add = x + y;
	endfunction
	task automatic test_add_frac;
		reg [31:0] a;
		reg [31:0] b;
		reg [31:0] c;
		begin
			c = frac_add(a, b);
			$display("%f + %f = %f", frac2real(a), frac2real(b), frac2real(c));
		end
	endtask
	function [31:0] frac_sub;
		input reg [31:0] x;
		input reg [31:0] y;
		frac_sub = x - y;
	endfunction
	task automatic test_sub_frac;
		reg [31:0] a;
		reg [31:0] b;
		reg [31:0] c;
		begin
			c = frac_sub(a, b);
			$display("%f - %f = %f", frac2real(a), frac2real(b), frac2real(c));
		end
	endtask
	function [64:0] frac_mul_aux;
		input reg [31:0] x;
		input reg [31:0] y;
		frac_mul_aux = $signed(x) * $signed(y);
	endfunction
	function [31:0] frac_mul_aux1;
		input reg [64:0] result;
		frac_mul_aux1 = {result[64], result[46:16]};
	endfunction
	function [31:0] frac_mul;
		input reg [31:0] x;
		input reg [31:0] y;
		frac_mul = frac_mul_aux1(frac_mul_aux(x, y));
	endfunction
	task automatic test_mul_frac;
		reg [31:0] a;
		reg [31:0] b;
		reg [31:0] c;
		begin
			c = frac_mul(a, b);
			$display("%f * %f = %f", frac2real(a), frac2real(b), frac2real(c));
		end
	endtask
	function [31:0] frac_from_int;
		input reg signed [31:0] i;
		frac_from_int = {i[15:0], 16'b0000000000000000};
	endfunction
	function [31:0] frac_from_real;
		input real x;
		frac_from_real = x * 65536;
	endfunction
	initial begin
		$display("frac");
		test_add_frac(frac_from_int(12), frac_from_int(13));
		test_sub_frac(frac_from_int(12), frac_from_int(13));
		test_sub_frac(frac_from_int(12), frac_from_real(13.87));
		test_mul_frac(frac_from_real(1.3), frac_from_real(1.5));
		test_mul_frac(frac_from_real(2.5), frac_from_real(2.5));
		test_mul_frac(frac_from_real(12), frac_from_real(1));
		test_mul_frac(frac_from_real(1), frac_from_real(12));
		test_mul_frac(frac_from_real(2.5), frac_from_real(9.8));
		test_mul_frac(frac_from_real(454.697), frac_from_real(8.500));
	end
	function [15:0] unit_tunit_add_aux;
		input reg [16:0] r;
		unit_tunit_add_aux = (r[16] ? 16'hffff : r[15:0]);
	endfunction
	function [15:0] unit_add;
		input reg [15:0] x;
		input reg [15:0] y;
		unit_add = unit_tunit_add_aux($unsigned(x) + $unsigned(y));
	endfunction
	function [15:0] unit_from_real;
		input real x;
		unit_from_real = x * 65536;
	endfunction
	function real unit_to_real;
		input reg [15:0] x;
		unit_to_real = ($unsigned(x) * 1.0) / 65536;
	endfunction
	task automatic test_unit_add;
		real a;
		real b;
		reg [15:0] x;
		reg [15:0] y;
		reg [15:0] c;
		begin
			x = unit_from_real(a);
			y = unit_from_real(b);
			c = unit_add(x, y);
			$display("%f + %f = %f", unit_to_real(x), unit_to_real(y), unit_to_real(c));
		end
	endtask
	function [31:0] unit_to_frac;
		input reg [15:0] x;
		unit_to_frac = {16'b0000000000000000, x};
	endfunction
	task automatic test_unit_frac;
		real a;
		reg [15:0] x;
		reg [31:0] x_f;
		begin
			x = unit_from_real(a);
			x_f = unit_to_frac(x);
			$display("%f %f", unit_to_real(x), frac2real(x_f));
		end
	endtask
	initial begin
		$display("unit");
		test_unit_add(0.1, 0.2);
		test_unit_add(0.1, 0.9);
		test_unit_frac(0.1);
		test_unit_frac(0.9);
		test_unit_frac(0.875);
	end
	reg [63:0] to_be_avg;
	wire [15:0] avged;
	unit_average #(4) unit_average_inst(
		to_be_avg,
		avged
	);
	initial begin
		$display("unit_average");
		to_be_avg[0+:16] = unit_from_real(0.1);
		to_be_avg[16+:16] = unit_from_real(0.3);
		to_be_avg[32+:16] = unit_from_real(0.6);
		to_be_avg[48+:16] = unit_from_real(0.9);
		$display("average of 0.1 0.3 0.6 0.9", avged);
	end
endmodule
